Sequence Class

next()
   provide template to be used by PrimeSequence

____________________________________________________________________________________________________________
PrimeSequence class

PrimeSequence constructor
   take one (two?) int parameters to determine where to start the sequence


next()
   increment the current value
   perform continuous modulus operations until the result the divisor is greater than half the current number (meaning it's prime). 
      Check that someNumber  * 2 is not greater than the current value (if so, exit loop)
      If the current value % someNumber is 0, current value is not prime so increase it and reset the divisor
      Otherwise, increment the divisor
   return the current value

getNumber()
   get the current value of the sequence

setNumber()
   set the value that the sequence should begin at

clearSequence()
   clear the current number of the sequence 

________________________________________________________________________________________________________
SequenceDemo class

main()
   High level view of program operation

isValid()
   validate command line input.
   Ensure that two integer arguments are provided and, if not, close the program.

generateSequence()
   retrieve the command line arguments
   generate the sequence and output the results as an array.

generateTable()
   creates a table from the prime sequence array that is as square as possible
   determines if the table to be generated will be square or irregular
   outputs the table on the terminal

squareTable() 
   prints a square looking table

irregularTable()
   prints a non-square looking table

generateHistogram()
   iterate through the array and find number of
   occurrences of each possible final digit
   
   print out histogram based on scale

determineScale()
   determine the scale of the histogram
   